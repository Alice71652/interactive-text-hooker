/*  Copyright (C) 2010-2012  kaosu (qiupf2000@gmail.com)
 *  This file is part of the Interactive Text Hooker.

 *  Interactive Text Hooker is free software: you can redistribute it and/or
 *  modify it under the terms of the GNU General Public License as published
 *  by the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.

 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.

 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "aes256.h"

#include <memory.h>
#include <intrin.h>

/*
// FIPS PUB 197: The Advanced Encryption Standard
// http://csrc.nist.gov/publications/fips/fips197/fips-197.pdf
*/
extern unsigned char SBox[0x100];
extern unsigned char InverseSBox[0x100];
extern unsigned char GFMulTable2[0x100];
extern unsigned char GFMulTable3[0x100];
extern unsigned char GFMulTable9[0x100];
extern unsigned char GFMulTable11[0x100];
extern unsigned char GFMulTable13[0x100];
extern unsigned char GFMulTable14[0x100];
void SubBytes4(unsigned char* state)
{
	state[0]=SBox[state[0]];
	state[1]=SBox[state[1]];
	state[2]=SBox[state[2]];
	state[3]=SBox[state[3]];
}
void SubBytesAndShiftRows(unsigned char* state)
{
	__asm
	{
		lea ebx,SBox
		mov edx,state
		xor eax,eax

		mov al,[edx]
		xlat
		mov [edx],al
		mov al,[edx+4]
		xlat
		mov [edx+4],al
		mov al,[edx+8]
		xlat
		mov [edx+8],al
		mov al,[edx+12]
		xlat
		mov [edx+12],al

		movzx eax,[edx+1]
		mov cl,[ebx+eax]
		mov al,[edx+5]
		xlat
		mov [edx+1],al
		mov al,[edx+9]
		xlat
		mov [edx+5],al
		mov al,[edx+13]
		xlat
		mov [edx+9],al
		mov [edx+13],cl

		movzx eax,[edx+2]
		mov cl,[ebx+eax]
		mov al,[edx+10]
		xlat
		mov [edx+10],cl
		mov [edx+2],al
		mov al,[edx+6]
		mov cl,[ebx+eax]
		mov al,[edx+14]
		xlat
		mov [edx+14],cl
		mov [edx+6],al

		movzx eax,[edx+3]
		mov cl,[ebx+eax]
		mov al,[edx+15]
		xlat
		mov [edx+3],al
		mov al,[edx+11]
		xlat
		mov [edx+15],al
		mov al,[edx+7]
		xlat
		mov [edx+11],al
		mov [edx+7],cl
	}
}
void SubBytes16_c(unsigned char* state)
{
	state[0]=SBox[state[0]];
	state[1]=SBox[state[1]];
	state[2]=SBox[state[2]];
	state[3]=SBox[state[3]];
	state[4]=SBox[state[4]];
	state[5]=SBox[state[5]];
	state[6]=SBox[state[6]];
	state[7]=SBox[state[7]];
	state[8]=SBox[state[8]];
	state[9]=SBox[state[9]];
	state[10]=SBox[state[10]];
	state[11]=SBox[state[11]];
	state[12]=SBox[state[12]];
	state[13]=SBox[state[13]];
	state[14]=SBox[state[14]];
	state[15]=SBox[state[15]];
}
void SubBytes16(unsigned char* state)
{
	__asm
	{
		lea ebx,SBox
		mov esi,state
		mov edi,esi

		lodsb
		xlat
		stosb
		lodsb
		xlat
		stosb
		lodsb
		xlat
		stosb
		lodsb
		xlat
		stosb

		lodsb
		xlat
		stosb
		lodsb
		xlat
		stosb
		lodsb
		xlat
		stosb
		lodsb
		xlat
		stosb

		lodsb
		xlat
		stosb
		lodsb
		xlat
		stosb
		lodsb
		xlat
		stosb
		lodsb
		xlat
		stosb

		lodsb
		xlat
		stosb
		lodsb
		xlat
		stosb
		lodsb
		xlat
		stosb
		lodsb
		xlat
		stosb

	}
}
void InvSubBytes16(unsigned char* state)
{
	state[0]=InverseSBox[state[0]];
	state[1]=InverseSBox[state[1]];
	state[2]=InverseSBox[state[2]];
	state[3]=InverseSBox[state[3]];
	state[4]=InverseSBox[state[4]];
	state[5]=InverseSBox[state[5]];
	state[6]=InverseSBox[state[6]];
	state[7]=InverseSBox[state[7]];
	state[8]=InverseSBox[state[8]];
	state[9]=InverseSBox[state[9]];
	state[10]=InverseSBox[state[10]];
	state[11]=InverseSBox[state[11]];
	state[12]=InverseSBox[state[12]];
	state[13]=InverseSBox[state[13]];
	state[14]=InverseSBox[state[14]];
	state[15]=InverseSBox[state[15]];

}
void KeyExpansion(unsigned char* key)
{
	unsigned int i,temp;
	for (i = 8; i < 60; i++)
	{
		temp = *(unsigned int*)(key + i * 4 - 4);
		if ((i & 7) == 0)
		{
			temp = _rotr(temp, 8);
			SubBytes4((unsigned char*)&temp);
			_bittestandcomplement((long*)&temp, (i >> 3) - 1);
		}
		else if ((i & 3) == 0)
		{
			SubBytes4((unsigned char*)&temp);
		}
		*(unsigned int*)(key + i * 4) = *(unsigned int*)(key + (i - 8) * 4) ^ temp;
	}
}
void ShiftRows(unsigned char* state)
{
	unsigned char t;
	t=state[1];
	state[1]=state[5];
	state[5]=state[9];
	state[9]=state[13];
	state[13]=t;

	t=state[2];
	state[2]=state[10];
	state[10]=t;
	t=state[6];
	state[6]=state[14];
	state[14]=t;

	t=state[3];
	state[3]=state[15];
	state[15]=state[11];
	state[11]=state[7];
	state[7]=t;
}
void InvShiftRows(unsigned char* state)
{
	unsigned char t;
	t=state[13];
	state[13]=state[9];
	state[9]=state[5];
	state[5]=state[1];
	state[1]=t;

	t=state[2];
	state[2]=state[10];
	state[10]=t;
	t=state[6];
	state[6]=state[14];
	state[14]=t;

	t=state[7];
	state[7]=state[11];
	state[11]=state[15];
	state[15]=state[3];
	state[3]=t;
}
void MixColumns(unsigned char* state)
{
	unsigned char a,b,c,d;
	unsigned int s2;
	union {
		unsigned int gf2;
		struct{unsigned char gf2a,gf2b,gf2c,gf2d;};	
	};
	union {
		unsigned int gf3;
		struct {unsigned char gf3b,gf3c,gf3d,gf3a;};		
	};
	union{
		unsigned int s1;
		struct {unsigned char s1c,s1d,s1a,s1b;};	
	};

	for (int x = 0; x < 16; x += 4){
		a=state[x];b=state[x+1]; 
		c=state[x+2];d=state[x+3]; 
		gf2a=GFMulTable2[a]; gf2b=GFMulTable2[b]; gf2c=GFMulTable2[c]; gf2d=GFMulTable2[d];
		gf3a=GFMulTable3[a]; gf3b=GFMulTable3[b]; gf3c=GFMulTable3[c]; gf3d=GFMulTable3[d];
		s1a = a; s1b = b; s1c = c; s1d = d; 
		s2 = _rotr(s1,8);
		*(unsigned int*)(state + x) = gf2 ^ gf3 ^ s1 ^ s2;
	}
}
void InvMixColumns(unsigned char* state)
{
	unsigned char a,b,c,d;
#define InvMixColumnsStep(x) \
	a=state[x];b=state[x+1]; \
	c=state[x+2];d=state[x+3]; \
	state[x]=GFMulTable14[a]^GFMulTable11[b]^GFMulTable13[c]^GFMulTable9[d]; \
	state[x+1]=GFMulTable9[a]^GFMulTable14[b]^GFMulTable11[c]^GFMulTable13[d]; \
	state[x+2]=GFMulTable13[a]^GFMulTable9[b]^GFMulTable14[c]^GFMulTable11[d]; \
	state[x+3]=GFMulTable11[a]^GFMulTable13[b]^GFMulTable9[c]^GFMulTable14[d];

	InvMixColumnsStep(0);
	InvMixColumnsStep(4);
	InvMixColumnsStep(8);
	InvMixColumnsStep(12);
}
void AddRoundKey(unsigned char* state, unsigned char *key, unsigned int round)
{
	key += round * 16;
	/*
	for (int i = 0; i < 16; i++)
		state[i] ^= key[i];
	*/
	__m128i s,k;
	s = _mm_loadu_si128((__m128i*)state);
	k = _mm_loadu_si128((__m128i*)key);
	s = _mm_xor_si128(s,k);
	_mm_storeu_si128((__m128i*)state,s);
}
void MixColumnsAndAddRoundKey(unsigned char* state, unsigned char* key, unsigned int round)
{
	__asm
	{
		mov eax,esp
		sub esp,0x10
		and esp,0xFFFFFFF0
		sub esp,0x40	
		push eax
		push 0
_aes_loop:
		mov ebx,[esp]
		add ebx,state
		movzx esi,byte ptr [ebx];a		
		movzx ecx,byte ptr [ebx + 2];c
		movzx edx,byte ptr [ebx + 3];d
		movzx ebx,byte ptr [ebx + 1];b

		lea edi,[esp+8]
		add edi,[esp]
		push ebp
		lea ebp,GFMulTable2
		mov al,[ebp+esi];a
		stosb
		mov al,[ebp+ebx];b
		stosb
		mov al,[ebp+ecx];c
		stosb
		mov al,[ebp+edx];d
		stosb

		add edi,0xC
		lea ebp,GFMulTable3
		mov al,[ebp+ebx];b
		stosb
		mov al,[ebp+ecx];c
		stosb
		mov al,[ebp+edx];d
		stosb
		mov al,[ebp+esi];a
		stosb
		pop ebp

		mov eax,ebx
		shl eax,8
		or eax,esi
		shl eax,8
		or eax,edx
		shl eax,8
		or eax,ecx
		mov ebx,[esp]
		mov [ebx+esp+0x28],eax
		ror eax,8
		mov [ebx+esp+0x38],eax

		add ebx,4
		cmp ebx,16
		mov [esp],ebx
		jb _aes_loop

		pop eax
		pop ebx
		movdqa xmm0, [esp]
		pxor xmm0, [esp+0x10]
		pxor xmm0, [esp+0x20]
		pxor xmm0, [esp+0x30]
		mov ecx,round
		shl ecx,4
		add ecx,key
		pxor xmm0, [ecx]
		mov eax,state
		movdqu [eax],xmm0
		mov esp,ebx
	}
}
#define InvAddRoundKey AddRoundKey
void AES256EncryptRound(unsigned char* plain_text, unsigned char* cipher_text, unsigned char* key,unsigned int round)
{
	__m128i x = _mm_load_si128((__m128i*)plain_text);
	x = _mm_xor_si128(x,*(__m128i*)key);
	_mm_store_si128((__m128i*)cipher_text,x);
	//AddRoundKey(cipher_text,key,0);

	for (unsigned int i=1;i<round;i++)
	{
		SubBytesAndShiftRows(cipher_text);
		MixColumnsAndAddRoundKey(cipher_text,key,i);
		//SubBytes16(cipher_text);
		//ShiftRows(cipher_text);
		//MixColumns(cipher_text);
		//AddRoundKey(cipher_text,key,i);
	}
	SubBytesAndShiftRows(cipher_text);
	//SubBytes16(cipher_text);
	//ShiftRows(cipher_text);
	AddRoundKey(cipher_text,key,round);
}
void AES256Encrypt(unsigned char* plain_text, unsigned char* cipher_text, unsigned char* key)
{
	__declspec(align(16)) unsigned char plain[16];
	__declspec(align(16)) unsigned char cipher[16];
	memcpy(plain,plain_text,16);
	AES256EncryptRound(plain,cipher,key,14);
	memcpy(cipher_text,cipher,16);
}
void AES256Decrypt(unsigned char* plain_text, unsigned char* cipher_text, unsigned char* key)
{
	memcpy(plain_text,cipher_text,0x10);
	InvAddRoundKey(plain_text,key,14);
	for (int i=13;i>0;i--)
	{
		InvShiftRows(plain_text);
		InvSubBytes16(plain_text);
		InvAddRoundKey(plain_text,key,i);
		InvMixColumns(plain_text);		
	}
	InvShiftRows(plain_text);
	InvSubBytes16(plain_text);
	InvAddRoundKey(plain_text,key,0);
}

AES_CBC_Cipher::AES_CBC_Cipher(unsigned char* key, unsigned char* iv)
{
	memcpy(cipher_iv,iv,0x10);
	memcpy(cipher_key,key,0x20);
	KeyExpansion(cipher_key);
}
AES_CBC_Cipher::~AES_CBC_Cipher()
{
	memset(this,0,sizeof(this));
}
void AES_CBC_Cipher::Encrypt(void* in, void* out)
{
	memcpy(out,in,0x10);
	unsigned char *cipher_out;
	cipher_out = (unsigned char*)out;
	for (int i = 0; i < 0x10; i++)
		cipher_out[i] ^= cipher_iv[i];
	AES256Encrypt(cipher_out, cipher_out, cipher_key);
	memcpy(cipher_iv, cipher_out, 0x10);
}
void AES_CBC_Cipher::Decrypt(void* in, void* out)
{
	unsigned char iv[0x10];
	memcpy(iv, cipher_iv, 0x10);
	memcpy(cipher_iv,in,0x10);
	unsigned char *plain_out;
	plain_out = (unsigned char*)out;
	AES256Decrypt(plain_out, cipher_iv, cipher_key);
	for (int i = 0; i < 0x10; i++) plain_out[i] ^= iv[i];
}
void AES_CBC_Cipher::Init( unsigned char* key, unsigned char* iv)
{
	memcpy(cipher_iv,iv,0x10);
	memcpy(cipher_key,key,0x20);
	KeyExpansion(cipher_key);
}


unsigned char SBox[0x100] = {
	0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
	0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
	0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
	0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
	0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
	0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
	0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
	0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
	0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
	0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
	0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
	0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
	0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
	0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
	0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
	0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
};

unsigned char InverseSBox[0x100] = {
	0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
	0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
	0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
	0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
	0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
	0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
	0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
	0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
	0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
	0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
	0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
	0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
	0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
	0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
	0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
	0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d
};

unsigned char GFMulTable2[0x100] = {
	0x00, 0x02, 0x04, 0x06, 0x08, 0x0a, 0x0c, 0x0e, 0x10, 0x12, 0x14, 0x16, 0x18, 0x1a, 0x1c, 0x1e, 
	0x20, 0x22, 0x24, 0x26, 0x28, 0x2a, 0x2c, 0x2e, 0x30, 0x32, 0x34, 0x36, 0x38, 0x3a, 0x3c, 0x3e, 
	0x40, 0x42, 0x44, 0x46, 0x48, 0x4a, 0x4c, 0x4e, 0x50, 0x52, 0x54, 0x56, 0x58, 0x5a, 0x5c, 0x5e, 
	0x60, 0x62, 0x64, 0x66, 0x68, 0x6a, 0x6c, 0x6e, 0x70, 0x72, 0x74, 0x76, 0x78, 0x7a, 0x7c, 0x7e, 
	0x80, 0x82, 0x84, 0x86, 0x88, 0x8a, 0x8c, 0x8e, 0x90, 0x92, 0x94, 0x96, 0x98, 0x9a, 0x9c, 0x9e, 
	0xa0, 0xa2, 0xa4, 0xa6, 0xa8, 0xaa, 0xac, 0xae, 0xb0, 0xb2, 0xb4, 0xb6, 0xb8, 0xba, 0xbc, 0xbe, 
	0xc0, 0xc2, 0xc4, 0xc6, 0xc8, 0xca, 0xcc, 0xce, 0xd0, 0xd2, 0xd4, 0xd6, 0xd8, 0xda, 0xdc, 0xde, 
	0xe0, 0xe2, 0xe4, 0xe6, 0xe8, 0xea, 0xec, 0xee, 0xf0, 0xf2, 0xf4, 0xf6, 0xf8, 0xfa, 0xfc, 0xfe, 
	0x1b, 0x19, 0x1f, 0x1d, 0x13, 0x11, 0x17, 0x15, 0x0b, 0x09, 0x0f, 0x0d, 0x03, 0x01, 0x07, 0x05, 
	0x3b, 0x39, 0x3f, 0x3d, 0x33, 0x31, 0x37, 0x35, 0x2b, 0x29, 0x2f, 0x2d, 0x23, 0x21, 0x27, 0x25, 
	0x5b, 0x59, 0x5f, 0x5d, 0x53, 0x51, 0x57, 0x55, 0x4b, 0x49, 0x4f, 0x4d, 0x43, 0x41, 0x47, 0x45, 
	0x7b, 0x79, 0x7f, 0x7d, 0x73, 0x71, 0x77, 0x75, 0x6b, 0x69, 0x6f, 0x6d, 0x63, 0x61, 0x67, 0x65, 
	0x9b, 0x99, 0x9f, 0x9d, 0x93, 0x91, 0x97, 0x95, 0x8b, 0x89, 0x8f, 0x8d, 0x83, 0x81, 0x87, 0x85, 
	0xbb, 0xb9, 0xbf, 0xbd, 0xb3, 0xb1, 0xb7, 0xb5, 0xab, 0xa9, 0xaf, 0xad, 0xa3, 0xa1, 0xa7, 0xa5, 
	0xdb, 0xd9, 0xdf, 0xdd, 0xd3, 0xd1, 0xd7, 0xd5, 0xcb, 0xc9, 0xcf, 0xcd, 0xc3, 0xc1, 0xc7, 0xc5, 
	0xfb, 0xf9, 0xff, 0xfd, 0xf3, 0xf1, 0xf7, 0xf5, 0xeb, 0xe9, 0xef, 0xed, 0xe3, 0xe1, 0xe7, 0xe5
};

unsigned char GFMulTable3[0x100] = {
	0x00, 0x03, 0x06, 0x05, 0x0c, 0x0f, 0x0a, 0x09, 0x18, 0x1b, 0x1e, 0x1d, 0x14, 0x17, 0x12, 0x11,
	0x30, 0x33, 0x36, 0x35, 0x3c, 0x3f, 0x3a, 0x39, 0x28, 0x2b, 0x2e, 0x2d, 0x24, 0x27, 0x22, 0x21,
	0x60, 0x63, 0x66, 0x65, 0x6c, 0x6f, 0x6a, 0x69, 0x78, 0x7b, 0x7e, 0x7d, 0x74, 0x77, 0x72, 0x71,
	0x50, 0x53, 0x56, 0x55, 0x5c, 0x5f, 0x5a, 0x59, 0x48, 0x4b, 0x4e, 0x4d, 0x44, 0x47, 0x42, 0x41,
	0xc0, 0xc3, 0xc6, 0xc5, 0xcc, 0xcf, 0xca, 0xc9, 0xd8, 0xdb, 0xde, 0xdd, 0xd4, 0xd7, 0xd2, 0xd1,
	0xf0, 0xf3, 0xf6, 0xf5, 0xfc, 0xff, 0xfa, 0xf9, 0xe8, 0xeb, 0xee, 0xed, 0xe4, 0xe7, 0xe2, 0xe1,
	0xa0, 0xa3, 0xa6, 0xa5, 0xac, 0xaf, 0xaa, 0xa9, 0xb8, 0xbb, 0xbe, 0xbd, 0xb4, 0xb7, 0xb2, 0xb1,
	0x90, 0x93, 0x96, 0x95, 0x9c, 0x9f, 0x9a, 0x99, 0x88, 0x8b, 0x8e, 0x8d, 0x84, 0x87, 0x82, 0x81,
	0x9b, 0x98, 0x9d, 0x9e, 0x97, 0x94, 0x91, 0x92, 0x83, 0x80, 0x85, 0x86, 0x8f, 0x8c, 0x89, 0x8a,
	0xab, 0xa8, 0xad, 0xae, 0xa7, 0xa4, 0xa1, 0xa2, 0xb3, 0xb0, 0xb5, 0xb6, 0xbf, 0xbc, 0xb9, 0xba,
	0xfb, 0xf8, 0xfd, 0xfe, 0xf7, 0xf4, 0xf1, 0xf2, 0xe3, 0xe0, 0xe5, 0xe6, 0xef, 0xec, 0xe9, 0xea,
	0xcb, 0xc8, 0xcd, 0xce, 0xc7, 0xc4, 0xc1, 0xc2, 0xd3, 0xd0, 0xd5, 0xd6, 0xdf, 0xdc, 0xd9, 0xda,
	0x5b, 0x58, 0x5d, 0x5e, 0x57, 0x54, 0x51, 0x52, 0x43, 0x40, 0x45, 0x46, 0x4f, 0x4c, 0x49, 0x4a,
	0x6b, 0x68, 0x6d, 0x6e, 0x67, 0x64, 0x61, 0x62, 0x73, 0x70, 0x75, 0x76, 0x7f, 0x7c, 0x79, 0x7a,
	0x3b, 0x38, 0x3d, 0x3e, 0x37, 0x34, 0x31, 0x32, 0x23, 0x20, 0x25, 0x26, 0x2f, 0x2c, 0x29, 0x2a,
	0x0b, 0x08, 0x0d, 0x0e, 0x07, 0x04, 0x01, 0x02, 0x13, 0x10, 0x15, 0x16, 0x1f, 0x1c, 0x19, 0x1a
};

unsigned char GFMulTable9[0x100] = {
	0x00, 0x09, 0x12, 0x1b, 0x24, 0x2d, 0x36, 0x3f, 0x48, 0x41, 0x5a, 0x53, 0x6c, 0x65, 0x7e, 0x77,
	0x90, 0x99, 0x82, 0x8b, 0xb4, 0xbd, 0xa6, 0xaf, 0xd8, 0xd1, 0xca, 0xc3, 0xfc, 0xf5, 0xee, 0xe7,
	0x3b, 0x32, 0x29, 0x20, 0x1f, 0x16, 0x0d, 0x04, 0x73, 0x7a, 0x61, 0x68, 0x57, 0x5e, 0x45, 0x4c,
	0xab, 0xa2, 0xb9, 0xb0, 0x8f, 0x86, 0x9d, 0x94, 0xe3, 0xea, 0xf1, 0xf8, 0xc7, 0xce, 0xd5, 0xdc,
	0x76, 0x7f, 0x64, 0x6d, 0x52, 0x5b, 0x40, 0x49, 0x3e, 0x37, 0x2c, 0x25, 0x1a, 0x13, 0x08, 0x01,
	0xe6, 0xef, 0xf4, 0xfd, 0xc2, 0xcb, 0xd0, 0xd9, 0xae, 0xa7, 0xbc, 0xb5, 0x8a, 0x83, 0x98, 0x91,
	0x4d, 0x44, 0x5f, 0x56, 0x69, 0x60, 0x7b, 0x72, 0x05, 0x0c, 0x17, 0x1e, 0x21, 0x28, 0x33, 0x3a,
	0xdd, 0xd4, 0xcf, 0xc6, 0xf9, 0xf0, 0xeb, 0xe2, 0x95, 0x9c, 0x87, 0x8e, 0xb1, 0xb8, 0xa3, 0xaa,
	0xec, 0xe5, 0xfe, 0xf7, 0xc8, 0xc1, 0xda, 0xd3, 0xa4, 0xad, 0xb6, 0xbf, 0x80, 0x89, 0x92, 0x9b,
	0x7c, 0x75, 0x6e, 0x67, 0x58, 0x51, 0x4a, 0x43, 0x34, 0x3d, 0x26, 0x2f, 0x10, 0x19, 0x02, 0x0b,
	0xd7, 0xde, 0xc5, 0xcc, 0xf3, 0xfa, 0xe1, 0xe8, 0x9f, 0x96, 0x8d, 0x84, 0xbb, 0xb2, 0xa9, 0xa0,
	0x47, 0x4e, 0x55, 0x5c, 0x63, 0x6a, 0x71, 0x78, 0x0f, 0x06, 0x1d, 0x14, 0x2b, 0x22, 0x39, 0x30,
	0x9a, 0x93, 0x88, 0x81, 0xbe, 0xb7, 0xac, 0xa5, 0xd2, 0xdb, 0xc0, 0xc9, 0xf6, 0xff, 0xe4, 0xed,
	0x0a, 0x03, 0x18, 0x11, 0x2e, 0x27, 0x3c, 0x35, 0x42, 0x4b, 0x50, 0x59, 0x66, 0x6f, 0x74, 0x7d,
	0xa1, 0xa8, 0xb3, 0xba, 0x85, 0x8c, 0x97, 0x9e, 0xe9, 0xe0, 0xfb, 0xf2, 0xcd, 0xc4, 0xdf, 0xd6,
	0x31, 0x38, 0x23, 0x2a, 0x15, 0x1c, 0x07, 0x0e, 0x79, 0x70, 0x6b, 0x62, 0x5d, 0x54, 0x4f, 0x46
};

unsigned char GFMulTable11[0x100] = {
	0x00, 0x0b, 0x16, 0x1d, 0x2c, 0x27, 0x3a, 0x31, 0x58, 0x53, 0x4e, 0x45, 0x74, 0x7f, 0x62, 0x69,
	0xb0, 0xbb, 0xa6, 0xad, 0x9c, 0x97, 0x8a, 0x81, 0xe8, 0xe3, 0xfe, 0xf5, 0xc4, 0xcf, 0xd2, 0xd9,
	0x7b, 0x70, 0x6d, 0x66, 0x57, 0x5c, 0x41, 0x4a, 0x23, 0x28, 0x35, 0x3e, 0x0f, 0x04, 0x19, 0x12,
	0xcb, 0xc0, 0xdd, 0xd6, 0xe7, 0xec, 0xf1, 0xfa, 0x93, 0x98, 0x85, 0x8e, 0xbf, 0xb4, 0xa9, 0xa2,
	0xf6, 0xfd, 0xe0, 0xeb, 0xda, 0xd1, 0xcc, 0xc7, 0xae, 0xa5, 0xb8, 0xb3, 0x82, 0x89, 0x94, 0x9f,
	0x46, 0x4d, 0x50, 0x5b, 0x6a, 0x61, 0x7c, 0x77, 0x1e, 0x15, 0x08, 0x03, 0x32, 0x39, 0x24, 0x2f,
	0x8d, 0x86, 0x9b, 0x90, 0xa1, 0xaa, 0xb7, 0xbc, 0xd5, 0xde, 0xc3, 0xc8, 0xf9, 0xf2, 0xef, 0xe4,
	0x3d, 0x36, 0x2b, 0x20, 0x11, 0x1a, 0x07, 0x0c, 0x65, 0x6e, 0x73, 0x78, 0x49, 0x42, 0x5f, 0x54,
	0xf7, 0xfc, 0xe1, 0xea, 0xdb, 0xd0, 0xcd, 0xc6, 0xaf, 0xa4, 0xb9, 0xb2, 0x83, 0x88, 0x95, 0x9e,
	0x47, 0x4c, 0x51, 0x5a, 0x6b, 0x60, 0x7d, 0x76, 0x1f, 0x14, 0x09, 0x02, 0x33, 0x38, 0x25, 0x2e,
	0x8c, 0x87, 0x9a, 0x91, 0xa0, 0xab, 0xb6, 0xbd, 0xd4, 0xdf, 0xc2, 0xc9, 0xf8, 0xf3, 0xee, 0xe5,
	0x3c, 0x37, 0x2a, 0x21, 0x10, 0x1b, 0x06, 0x0d, 0x64, 0x6f, 0x72, 0x79, 0x48, 0x43, 0x5e, 0x55,
	0x01, 0x0a, 0x17, 0x1c, 0x2d, 0x26, 0x3b, 0x30, 0x59, 0x52, 0x4f, 0x44, 0x75, 0x7e, 0x63, 0x68,
	0xb1, 0xba, 0xa7, 0xac, 0x9d, 0x96, 0x8b, 0x80, 0xe9, 0xe2, 0xff, 0xf4, 0xc5, 0xce, 0xd3, 0xd8,
	0x7a, 0x71, 0x6c, 0x67, 0x56, 0x5d, 0x40, 0x4b, 0x22, 0x29, 0x34, 0x3f, 0x0e, 0x05, 0x18, 0x13,
	0xca, 0xc1, 0xdc, 0xd7, 0xe6, 0xed, 0xf0, 0xfb, 0x92, 0x99, 0x84, 0x8f, 0xbe, 0xb5, 0xa8, 0xa3
};

unsigned char GFMulTable13[0x100] = {
	0x00, 0x0d, 0x1a, 0x17, 0x34, 0x39, 0x2e, 0x23, 0x68, 0x65, 0x72, 0x7f, 0x5c, 0x51, 0x46, 0x4b,
	0xd0, 0xdd, 0xca, 0xc7, 0xe4, 0xe9, 0xfe, 0xf3, 0xb8, 0xb5, 0xa2, 0xaf, 0x8c, 0x81, 0x96, 0x9b,
	0xbb, 0xb6, 0xa1, 0xac, 0x8f, 0x82, 0x95, 0x98, 0xd3, 0xde, 0xc9, 0xc4, 0xe7, 0xea, 0xfd, 0xf0,
	0x6b, 0x66, 0x71, 0x7c, 0x5f, 0x52, 0x45, 0x48, 0x03, 0x0e, 0x19, 0x14, 0x37, 0x3a, 0x2d, 0x20,
	0x6d, 0x60, 0x77, 0x7a, 0x59, 0x54, 0x43, 0x4e, 0x05, 0x08, 0x1f, 0x12, 0x31, 0x3c, 0x2b, 0x26,
	0xbd, 0xb0, 0xa7, 0xaa, 0x89, 0x84, 0x93, 0x9e, 0xd5, 0xd8, 0xcf, 0xc2, 0xe1, 0xec, 0xfb, 0xf6,
	0xd6, 0xdb, 0xcc, 0xc1, 0xe2, 0xef, 0xf8, 0xf5, 0xbe, 0xb3, 0xa4, 0xa9, 0x8a, 0x87, 0x90, 0x9d,
	0x06, 0x0b, 0x1c, 0x11, 0x32, 0x3f, 0x28, 0x25, 0x6e, 0x63, 0x74, 0x79, 0x5a, 0x57, 0x40, 0x4d,
	0xda, 0xd7, 0xc0, 0xcd, 0xee, 0xe3, 0xf4, 0xf9, 0xb2, 0xbf, 0xa8, 0xa5, 0x86, 0x8b, 0x9c, 0x91,
	0x0a, 0x07, 0x10, 0x1d, 0x3e, 0x33, 0x24, 0x29, 0x62, 0x6f, 0x78, 0x75, 0x56, 0x5b, 0x4c, 0x41,
	0x61, 0x6c, 0x7b, 0x76, 0x55, 0x58, 0x4f, 0x42, 0x09, 0x04, 0x13, 0x1e, 0x3d, 0x30, 0x27, 0x2a,
	0xb1, 0xbc, 0xab, 0xa6, 0x85, 0x88, 0x9f, 0x92, 0xd9, 0xd4, 0xc3, 0xce, 0xed, 0xe0, 0xf7, 0xfa,
	0xb7, 0xba, 0xad, 0xa0, 0x83, 0x8e, 0x99, 0x94, 0xdf, 0xd2, 0xc5, 0xc8, 0xeb, 0xe6, 0xf1, 0xfc,
	0x67, 0x6a, 0x7d, 0x70, 0x53, 0x5e, 0x49, 0x44, 0x0f, 0x02, 0x15, 0x18, 0x3b, 0x36, 0x21, 0x2c,
	0x0c, 0x01, 0x16, 0x1b, 0x38, 0x35, 0x22, 0x2f, 0x64, 0x69, 0x7e, 0x73, 0x50, 0x5d, 0x4a, 0x47,
	0xdc, 0xd1, 0xc6, 0xcb, 0xe8, 0xe5, 0xf2, 0xff, 0xb4, 0xb9, 0xae, 0xa3, 0x80, 0x8d, 0x9a, 0x97
};

unsigned char GFMulTable14[0x100] = {
	0x00, 0x0e, 0x1c, 0x12, 0x38, 0x36, 0x24, 0x2a, 0x70, 0x7e, 0x6c, 0x62, 0x48, 0x46, 0x54, 0x5a,
	0xe0, 0xee, 0xfc, 0xf2, 0xd8, 0xd6, 0xc4, 0xca, 0x90, 0x9e, 0x8c, 0x82, 0xa8, 0xa6, 0xb4, 0xba,
	0xdb, 0xd5, 0xc7, 0xc9, 0xe3, 0xed, 0xff, 0xf1, 0xab, 0xa5, 0xb7, 0xb9, 0x93, 0x9d, 0x8f, 0x81,
	0x3b, 0x35, 0x27, 0x29, 0x03, 0x0d, 0x1f, 0x11, 0x4b, 0x45, 0x57, 0x59, 0x73, 0x7d, 0x6f, 0x61,
	0xad, 0xa3, 0xb1, 0xbf, 0x95, 0x9b, 0x89, 0x87, 0xdd, 0xd3, 0xc1, 0xcf, 0xe5, 0xeb, 0xf9, 0xf7,
	0x4d, 0x43, 0x51, 0x5f, 0x75, 0x7b, 0x69, 0x67, 0x3d, 0x33, 0x21, 0x2f, 0x05, 0x0b, 0x19, 0x17,
	0x76, 0x78, 0x6a, 0x64, 0x4e, 0x40, 0x52, 0x5c, 0x06, 0x08, 0x1a, 0x14, 0x3e, 0x30, 0x22, 0x2c,
	0x96, 0x98, 0x8a, 0x84, 0xae, 0xa0, 0xb2, 0xbc, 0xe6, 0xe8, 0xfa, 0xf4, 0xde, 0xd0, 0xc2, 0xcc,
	0x41, 0x4f, 0x5d, 0x53, 0x79, 0x77, 0x65, 0x6b, 0x31, 0x3f, 0x2d, 0x23, 0x09, 0x07, 0x15, 0x1b,
	0xa1, 0xaf, 0xbd, 0xb3, 0x99, 0x97, 0x85, 0x8b, 0xd1, 0xdf, 0xcd, 0xc3, 0xe9, 0xe7, 0xf5, 0xfb,
	0x9a, 0x94, 0x86, 0x88, 0xa2, 0xac, 0xbe, 0xb0, 0xea, 0xe4, 0xf6, 0xf8, 0xd2, 0xdc, 0xce, 0xc0,
	0x7a, 0x74, 0x66, 0x68, 0x42, 0x4c, 0x5e, 0x50, 0x0a, 0x04, 0x16, 0x18, 0x32, 0x3c, 0x2e, 0x20,
	0xec, 0xe2, 0xf0, 0xfe, 0xd4, 0xda, 0xc8, 0xc6, 0x9c, 0x92, 0x80, 0x8e, 0xa4, 0xaa, 0xb8, 0xb6,
	0x0c, 0x02, 0x10, 0x1e, 0x34, 0x3a, 0x28, 0x26, 0x7c, 0x72, 0x60, 0x6e, 0x44, 0x4a, 0x58, 0x56,
	0x37, 0x39, 0x2b, 0x25, 0x0f, 0x01, 0x13, 0x1d, 0x47, 0x49, 0x5b, 0x55, 0x7f, 0x71, 0x63, 0x6d,
	0xd7, 0xd9, 0xcb, 0xc5, 0xef, 0xe1, 0xf3, 0xfd, 0xa7, 0xa9, 0xbb, 0xb5, 0x9f, 0x91, 0x83, 0x8d
};